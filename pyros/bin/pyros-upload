#!/usr/bin/env python3

import os
import sys
import pyroscommon as pc

service = False
restart = False
tail = False

args = pc.processCommonHostSwitches(pc.args)


def printHelp(rc):
    print("usage: pyros [<host[:port]>] upload [-s|--service] <processId> <file>")
    print("")
    print("    -h                    help message")
    print("    -s|--service          uploaded code is supposed to be service.")
    print("    -r|--restart          restarts uploaded service.")
    print("    -f|--tail             'tail' messages out of process.")
    print("    <processId>           id process is going to be known from this point on.")
    print("    <file>                python file name to be uploaded.")
    sys.exit(rc)


if len(args) < 2:
    print("Not enought arguments. Got only " + str(len(args)) + ".")
    print(str(args))
    printHelp(1)

if pc.hasHelpSwitch:
    printHelp(0)

if args[0] == "-s" or args[0] == "--service":
    service = True
    del args[0]

if args[0] == "-r" or args[0] == "--restart":
    restart = True
    del args[0]

if args[0] == "-f" or args[0] == "--tail":
    tail = True
    del args[0]

processId = args[0]

filename = args[1]


if not os.path.exists(filename):
    print("File '" + filename + "' does not exist.")
    sys.exit(1)


pyrosClient = None
hadStart = False


def executeCommand(client):
    global pyrosClient

    pyrosClient = client

    file = open(filename)
    fileContent = file.read()
    file.close()

    client.publish("exec/" + processId + "/process", fileContent)

    if service:
        client.publish("exec/" + processId, "make-service")
        client.publish("exec/" + processId, "enable-service")

    return True


def processOut(line, pid):
    if line.endswith("\n"):
        line = line[:len(line) - 1]
    if not tail:
        return False
    print(line)
    return True


def processStatus(line, pid):
    global hadStart

    if line.startswith("stored"):
        if restart:
            pyrosClient.publish("exec/" + processId, "restart")
        else:
            return False
    elif restart and line.startswith("PyROS: started"):
        hadStart = True
        if tail:
            print("Process " + pid + " is restarted. Showing output:")
        else:
            print("Process " + pid + " is restarted.")
        return tail
    return True


pc.processCommand(processId, executeCommand, processOut, processStatus)
