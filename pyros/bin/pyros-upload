#!/usr/bin/env python3

#
# Copyright 2016-2017 Games Creators Club
#
# MIT License
#

import os
import sys
import pyroscommon as pc

service = False
restart = False
tail = False
executable = None

args = pc.processCommonHostSwitches(pc.args)


def printHelp(rc):
    print("usage: pyros [<host[:port]>] upload [-s|--service] <processId> <file> [-e|--extra <extra-file> { <extra-file> }]")
    print("")
    print("    -h                    help message")
    print("    -s|--service          uploaded code is supposed to be service.")
    print("    -r|--restart          restarts uploaded service.")
    print("    -e|--exec <exec>      sets executable to be used to start program. If omitted 'python3' is used by default.")
    print("    -f|--tail             'tail' messages out of process.")
    print("    <processId>           id process is going to be known from this point on.")
    print("    <file>                python file name to be uploaded.")
    print("    -e|--extra            ")
    sys.exit(rc)


def processSwitches(arguments):
    global service, restart, tail, executable

    while len(arguments) > 0 and arguments[0].startswith("-"):
        if arguments[0] == "-h":
            printHelp(0)

        elif arguments[0] == "-s" or arguments[0] == "--service":
            service = True
            del args[0]

        elif arguments[0] == "-r" or arguments[0] == "--restart":
            restart = True
            del arguments[0]

        elif arguments[0] == "-f" or arguments[0] == "--tail":
            tail = True
            del arguments[0]

        elif arguments[0] == "-e" or arguments[0] == "--exec":
            if len(arguments) < 2:
                print("Error: missing parameter after -e/--exec option")
                printHelp(-1)
            else:
                del arguments[0]
                executable = arguments[0]
                del arguments[0]

    return arguments


if len(args) < 2:
    print("Not enought arguments. Got only " + str(len(args)) + ".")
    print(str(args))
    printHelp(1)

if pc.hasHelpSwitch:
    printHelp(0)

args = processSwitches(args)

processId = args[0]

filename = args[1]

files = [processId + ".py"]

del args[0]
del args[0]

if not os.path.exists(filename):
    print("File '" + filename + "' does not exist.")
    sys.exit(1)


extra_files = []

if len(args) > 0:
    if args[0] != "-e" and args[0] != "--extra":
        print("Unknown switch " + args[0])
        printHelp(1)
    del args[0]

    if len(args) < 1:
        print("Need at least one extra file")
        printHelp(1)

    while len(args) > 0:
        if not os.path.exists(args[0]):
            print("File '" + args[0] + "' does not exist.")
            sys.exit(1)

        extra_files.append(args[0])
        del args[0]

pyrosClient = None
hadStart = False


def executeCommand(client):
    global pyrosClient

    def sendFile(dest_path, filename):
        with open(filename, "rb") as file:
            fileContent = file.read()

            extraName = os.path.join(dest_path, os.path.split(filename)[1])
            files.append(extraName)

            client.publish("exec/" + processId + "/process/" + extraName, fileContent)

    def processDir(dest_path, dir):
        for file in os.listdir(dir):
            if not file.endswith('__pycache__'):
                if os.path.isdir(file):
                    processDir(os.path.join(dest_path, file), os.path.join(dir, file))
                else:
                    sendFile(dest_path, os.path.join(dir, file))

    pyrosClient = client

    with open(filename) as file:
        fileContent = file.read()

    client.publish("exec/" + processId + "/process", fileContent)

    if service:
        client.publish("exec/" + processId, "make-service")
        client.publish("exec/" + processId, "enable-service")

    if executable is not None:
        client.publish("exec/" + processId, "set-executable " + executable)

    for extra_file in extra_files:
        if os.path.isdir(extra_file):
            processDir(os.path.split(extra_file)[1], extra_file)
        else:
            sendFile("", extra_file)

    return True


def processOut(line, pid):
    if line.endswith("\n"):
        line = line[:len(line) - 1]
    if not tail:
        return False
    print(line)
    return True


def processStatus(line, pid):
    global hadStart

    if line.startswith("stored "):
        file = line[7:]
        if file in files:
            i = files.index(file)
            del files[i]
            if len(files) == 0:
                if restart:
                    pyrosClient.publish("exec/" + processId, "restart")
                else:
                    return False
    elif restart and line.startswith("PyROS: started"):
        hadStart = True
        if tail:
            print("Process " + pid + " is restarted. Showing output:")
        else:
            print("Process " + pid + " is restarted.")
        return tail
    return True


pc.processCommand(processId, executeCommand, processOut, processStatus)
