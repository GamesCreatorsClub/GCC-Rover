#!/usr/bin/env python3

#
# Copyright 2016-2017 Games Creators Club
#
# MIT License
#

import socket
import sys
import threading
import time

import pyroscommon as pc

hasHelpSwitch = False
verboseFlag = True


def processSwitches(arguments):
    global hasHelpSwitch, timeout, verboseFlag

    while len(arguments) > 0 and arguments[0].startswith("-"):
        if arguments[0] == "-h":
            helpSwitch = True
        elif arguments[0] == "-v":
            verboseFlag = True
        elif arguments[0] == "-t":
            if len(arguments) > 1:
                del arguments[0]
                try:
                    timeout = int(arguments[0])
                except:
                    print("ERROR: Timeout needs to be an integer")
                    sys.exit(1)
            else:
                print("ERROR: Timeout switch needs to be followed by an integer")
                sys.exit(1)
        del arguments[0]

    return arguments


args = processSwitches(pc.args)


def displayHelp(rc):
    print("usage: pyros discover")
    print("")
    print("    -h                    help message")
    print("    -t <timeout>          timeout in seconds. Default 5.")
    print("")
    sys.exit(rc)


def processResponse(resp):
    err = 1
    details = {}
    for entry in resp.split(";"):
        split = entry.split("=")
        if len(split) == 2:
            details[split[0]] = split[1]
        else:
            details["ERROR" + str(err)] = entry

    errors = []
    for key in details:
        if key != "IP" and key != "NAME" and key != "TYPE" and key != "PORT":
            if key.startswith("ERROR"):
                errors.append(details[key])
            else:
                errors.append(key + "=" + details[key])

    print("{0!s:<20} {1:<20} {2:<20} {3}".format(details["IP"] + ":" + details["PORT"], details["NAME"], details["TYPE"], ";".join(errors)))


def receiveDiscovery():
    print("{0!s:<20} {1:<20} {2:<20} {3}".format("ip", "name", "type", "other"))
    pc.receiveDiscoveryPackets(processResponse)
    sys.exit(0)


if hasHelpSwitch:
    displayHelp(0)

else:

    pc.setupListening()

    thread = threading.Thread(target=receiveDiscovery, args=())
    thread.daemon = False
    thread.start()

    pc.sendDiscoveryPacket("Q#")
